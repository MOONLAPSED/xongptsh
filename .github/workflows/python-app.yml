name: python-app

on: 
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  setup:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
            
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Build
        run: |
          echo "Building application..."
          # build commands here
  
  test:
    runs-on: ubuntu-latest
  
    steps:
    - name: Test with pytest
      run: |
        ls -Ra /home/runner/work/xongptsh/xongptsh/
        python main.py > test-output.txt  # Redirect output to a file
        # Implement retries with exponential backoff for any failed tests
        - name: Retry with exponential backoff
          uses: actions/retry@v2
          with:
            max-retries: 3
            backoff-strategy: exponential
            retry-on: |
              failed
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ls -R /home/runner/work/xongptsh/
        python main.py > test-output.txt  # Redirect output to a file

    - name: Archive test output 
      uses: actions/upload-artifact@v3
      with:
         name: test-output
         path: test-output.txt

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: test-output
        path: downloaded-artifact  # Path to download the artifact
  
    - name: Display downloaded artifact content
      run: cat downloaded-artifact/test-output.txt  # Display the content of the downloaded artifact


  deploy:
    runs-on: ubuntu-latest
  
    steps:
      - name: Deploy
        run: |
          echo "Deploying application..."
          # Your deployment commands here
    - name: Build
      run: |
        echo "Building application..."
        # build commands here
        # Add rate limiting policy to limit the number of requests made to external services
        - name: Rate limiting policy
          uses: actions/github-script@v4
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const delay = 5000; // Delay in milliseconds between each request
              const requests = [ /* List of requests to be made */ ];
              for (const request of requests) {
                await github.request(request);
                await new Promise(resolve => setTimeout(resolve, delay));
              }

# Sweep AI turns bugs & feature requests into code changes (https://sweep.dev)
# For details on our config file, check out our docs at https://docs.sweep.dev/usage/config
 
# This setting contains a list of rules that Sweep will check for. If any of these rules are broken in a new commit, Sweep will create an pull request to fix the broken rule.
rules:
- "All docstrings and comments should be up to date."
- "Leftover TODOs in the code should be handled."
- "All new business logic should have corresponding unit tests in the tests/ directory."
- "Any clearly inefficient or repeated code should be optimized or refactored."
 
# This is the branch that Sweep will develop from and make pull requests to. Most people use 'main' or 'master' but some users also use 'dev' or 'staging'.
branch: 'main'
 
# By default Sweep will read the logs and outputs from your existing Github Actions. To disable this, set this to false.
gha_enabled: True
 
# This is the description of your project. It will be used by sweep when creating PRs. You can tell Sweep what's unique about your project, what frameworks you use, or anything else you want.
#
# Example:
# description: sweepai/sweep is a python project. The main api endpoints are in sweepai/api.py. Write code that adheres to PEP8.
description: ''
 
# This sets whether to create pull requests as drafts. If this is set to True, then all pull requests will be created as drafts and GitHub Actions will not be triggered.
draft: False
 
# This is a list of directories that Sweep will not be able to edit. In our example, Sweep is unable to modify the .github folder as we do not want Sweep to modify our GitHub Actions.
blocked_dirs: [".github/"]
 
# This is a list of documentation links that Sweep will use to help it understand your code. You can add links to documentation for any packages you use here.
#
# Example:
# docs:
#   - Modal: https://modal.com/docs/reference
#   - PyGitHub: https://pygithub.readthedocs.io/en/latest/
docs: []
 
# Sandbox executes commands in a sandboxed environment to validate code changes after every edit to guarantee pristine code. For more details, see the [Sandbox](./sandbox) page.
sandbox:
  install:
    - trunk init
  check:
    - trunk fmt {file_path}
    - trunk check --fix {file_path}
    - pytest (per github actions)
rules:
  - Consumer hardware limitations [[Hardware Constraints]]
  - Scope limited to text files and Markdown [[Plain Text]] (SQLite3 db - BLOBSs will be allowed in the special case of embeddings)
  - Command line interfaces for accessibility [[CLI]]
  - When printing debug information, consider redirecting all messages to a log file so that logs are saved permanently.
  - Include docstrings for both your module and any public functions within it so users know what the code does and how to use it.
  - Rate limiting policies [[Rate Limiting]]
  - Implement retries with exponential backoff [[Retries]]
  - OpenAPI/Swagger documentation [[Documentation]]
  - Loose coupling between modules [[Loose Coupling]]
# Return Codes - see example returncode schema: 
return_example = """
  {
    "status": "ok",
    "retcode": 0,
    "data": {
      "result": "success"
    },
    "echo": "123"
  }
  """
"""
Return codes indicate execution status:
Code | Meaning
0	Success
1xxxx	Request errors
2xxxx	Handler errors
3xxxx	Execution errors
Request Errors
Similar to HTTP 4xx client errors.
Code	Error	Cause
10001	Bad Request	Malformed request
10002	Unsupported Action	Unimplemented action
10003	Bad Param	Invalid parameter
Similar to HTTP 5xx server errors:
Code	Error	Cause
20001	Bad Handler	Implementation error
20002	Internal Handler Error	Uncaught exception
And more.
"""